(()=>{"use strict";const e=(()=>{const e=document.querySelector("#task-title"),o=document.querySelector("#select-project"),s=document.querySelector("#priority"),a=document.querySelector("#due-date"),r=document.querySelector("#description");let n=[];return{allTasks:n,addTask:function(){if(""==e.value||""==o.value||""==s.value||""==a.value)alert("Please fill all inputs.");else{let c=((e,t,o,s,a)=>({title:e,project:t,priority:o,dueDate:s,description:a}))(e.value,o.value,s.value,a.value,r.value);n.push(c),console.log(n),t.projectList.forEach((e=>{document.querySelector("#select-project").value===e.title&&e.tasks.push(c)}))}},orderTasks:function(){t.projectList.forEach((e=>{e.tasks=e.tasks.filter((e=>n.includes(e)))}))}}})(),t=(()=>{let t=[],o=[];const s=document.querySelector("#project-title-input");return{projectNames:o,projectList:t,addProject:function(){if(""==s.value)alert("Please fill the input.");else{let e={title:s.value,tasks:[]};t.push(e),o.push(s.value),console.log(t)}},removeTasksWithProj:function(t){e.allTasks.forEach((o=>{o.project==t.target.parentNode.textContent.trim()&&(o.project="",e.allTasks=e.allTasks.filter((e=>""!==e.project)))}))}}})(),o=(()=>{const o=document.querySelector("#task-modal-bg"),s=document.querySelector("#project-tasks-container"),a=document.querySelector("#project-modal-bg"),r=document.querySelector("#select-project"),n=document.querySelector("#project-container"),c=document.querySelector("#task-container");return{body:document.querySelector("body"),deleteTask:function(o){e.allTasks.splice(o.target.dataset.taskNum,1),t.projectList.forEach((e=>{console.log(e)}))},clearProjTasks:function(){s.innerHTML=""},showProjectTasks:function(e){t.projectList.forEach((t=>{t.title===e.target.textContent.trim()&&(s.innerHTML=`\n        <h3 id="project-tasks-title">${t.title}</h3>\n        `,t.tasks.forEach((e=>{let t=document.createElement("div");t.innerHTML=`\n          <p>${e.title}</p>  \n          <p class="task-display">${e.dueDate}</p>\n          <p class="task-display">${e.priority}</p>\n        \n            `,s.appendChild(t)})))}))},projTaskDisplayCheck:function(){const e=document.querySelector("#project-tasks-title");t.projectList.forEach((o=>{o.title===e.textContent&&(0===o.tasks.length||-1===t.projectNames.indexOf(e.textContent)?s.innerHTML="\n            \n            ":o.tasks.length>0&&(console.log(o.tasks),s.innerHTML=`\n            <h3 id="project-tasks-title">${o.title}</h3>\n            `,o.tasks.forEach((e=>{let t=document.createElement("div");t.innerHTML=`\n              <p>${e.title}</p>  \n              <p class="task-display">${e.dueDate}</p>\n              <p class="task-display">${e.priority}</p>\n              \n              `,s.appendChild(t)}))))})),null!==e&&-1===t.projectNames.indexOf(e.textContent)&&(s.innerHTML="")},deleteProject:function(e){t.projectList.splice(e.target.dataset.indexNumber,1),t.projectNames.splice(e.target.dataset.indexNumber,1)},openTaskModal:function(){o.style.display="block"},openProjectModal:function(){a.style.display="block"},hideProjectModal:function(){a.style.display="none"},hideTaskModal:function(){o.style.display="none"},clearProjForm:function(){document.querySelector("#project-title-input").value=""},clearTaskForm:function(){const e=document.querySelector("#task-title"),t=document.querySelector("#select-project"),o=document.querySelector("#due-date"),s=document.querySelector("#priority"),a=document.querySelector("#description");e.value="",t.value="None",o.value="",s.value="Low",a.value=""},renderProjOptions:function(){r.innerHTML='\n      <option value="">Choose Project</option>\n      <option value="none">None</option>\n    ',t.projectList.forEach((e=>{const t=document.createElement("option");t.id="project-dropdown",t.textContent=e.title,r.appendChild(t)}))},showProjects:function(){n.innerHTML='\n      <h3 id="project-display">Projects</h3>\n    ',t.projectList.forEach((e=>{const o=document.createElement("li");o.id="project-list-item",o.innerHTML=`\n      ${e.title}\n      <i class="fas fa-trash delete-project" data-index-number=${t.projectList.indexOf(e)}></i>\n      `,n.appendChild(o)}))},showTasks:function(){c.innerHTML='\n    \t<h3 id="all-tasks">All Tasks</h3>\n    ',e.allTasks.forEach((o=>{const s=document.createElement("div");s.id="task-list-item",s.innerHTML=`\n      <p>${o.title}</p> \n      <p class="task-display">Project: ${o.project}</p>   \n      <p class="task-display">${o.dueDate}</p>\n      <p class="task-display">${o.priority}</p>\n      <i class="fas fa-trash delete-task" data-task-num=${e.allTasks.indexOf(o)} data-project-num=${t.projectList}></i>\n      `,c.appendChild(s)}))}}})();o.body.addEventListener("click",(s=>{"task-btn"===s.target.id?o.openTaskModal():"project-btn"===s.target.id?o.openProjectModal():"close-button"===s.target.className?(o.hideProjectModal(),o.hideTaskModal()):"task-submit"===s.target.id?(e.addTask(),o.showTasks(),o.hideTaskModal(),o.clearTaskForm()):"project-submit"===s.target.id?(t.addProject(),o.showProjects(),o.renderProjOptions(),o.hideProjectModal(),o.clearProjForm()):"fas fa-trash delete-project"===s.target.className?(o.deleteProject(s),t.removeTasksWithProj(s),o.renderProjOptions(),o.showProjects(),o.showTasks(),o.projTaskDisplayCheck()):"fas fa-trash delete-task"===s.target.className?(o.deleteTask(s),e.orderTasks(),o.showProjects(),o.showTasks(),o.projTaskDisplayCheck()):"project-list-item"===s.target.id&&(o.clearProjTasks(),o.showProjectTasks(s),o.projTaskDisplayCheck())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,