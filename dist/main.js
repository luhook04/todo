(()=>{"use strict";const e=(()=>{let e=[];const t=document.querySelector("#project-title-input");return{projectList:e,deleteProject:function(){let t=e.indexOf();e.splice(t,1)},addProject:function(){let o={title:t.value,tasks:[]};e.push(o),console.log(e)}}})(),t=(()=>{const t=document.querySelector("#task-title"),o=document.querySelector("#select-project"),r=document.querySelector("#priority"),c=document.querySelector("#due-date"),n=document.querySelector("#description");let l=[];return{allTasks:l,addTask:function(){let a=((e,t,o,r,c)=>({title:e,project:t,priority:o,dueDate:r,description:c}))(t.value,o.value,r.value,c.value,n.value);l.push(a),console.log(l),e.projectList.forEach((e=>{document.querySelector("#select-project").value===e.title&&e.tasks.push(a)}))}}})(),o=(()=>{const o=document.querySelector("#task-modal-bg"),r=document.querySelector("#project-modal-bg"),c=document.querySelector("#select-project"),n=document.querySelector("#project-container"),l=document.querySelector("#task-container");return{body:document.querySelector("body"),deleteProject:function(t){console.log(t.target),e.projectList.splice(t.target.dataset.indexNumber,1)},openTaskModal:function(){o.style.display="block"},openProjectModal:function(){r.style.display="block"},hideProjectModal:function(){r.style.display="none"},hideTaskModal:function(){o.style.display="none"},clearProjForm:function(){document.querySelector("#project-title-input").value=""},clearTaskForm:function(){const e=document.querySelector("#task-title"),t=document.querySelector("#select-project"),o=document.querySelector("#due-date"),r=document.querySelector("#priority"),c=document.querySelector("#description");e.value="",t.value="None",o.value="",r.value="Low",c.value=""},renderProjOptions:function(){c.innerHTML='\n      <option value="">Choose Project</option>\n      <option value="none">None</option>\n    ',e.projectList.forEach((e=>{const t=document.createElement("option");t.id="project-dropdown",t.textContent=e.title,c.appendChild(t)}))},showProjects:function(){n.innerHTML='\n      <h3 id="project-display">Projects</h3>\n    ',e.projectList.forEach((t=>{const o=document.createElement("li");o.id="project-list-item",o.innerHTML=`\n      ${t.title}\n      <i class="fas fa-trash delete-project" data-index-number=${e.projectList.indexOf(t)}></i>\n      `,n.appendChild(o)}))},showTasks:function(){l.innerHTML='\n    \t<h3 id="all-tasks">All Tasks</h3>\n    ',t.allTasks.forEach((e=>{const t=document.createElement("div");t.id="task-list-item",t.innerHTML=`\n      <p>${e.title}</p> \n      <p class="task-display">Project: ${e.project}</p>   \n      <p class="task-display">${e.dueDate}</p>\n      <p class="task-display">${e.priority}</p>\n      <i class="fas fa-trash"></i>\n      `,l.appendChild(t)}))}}})();o.body.addEventListener("click",(r=>{"task-btn"===r.target.id?o.openTaskModal():"project-btn"===r.target.id?o.openProjectModal():"close-button"===r.target.className?(o.hideProjectModal(),o.hideTaskModal()):"task-submit"===r.target.id?(t.addTask(),o.showTasks(),o.hideTaskModal(),o.clearTaskForm()):"project-submit"===r.target.id?(e.addProject(),o.showProjects(),o.renderProjOptions(),o.hideProjectModal(),o.clearProjForm()):"fas fa-trash delete-project"===r.target.className&&(o.deleteProject(r),o.showProjects())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,